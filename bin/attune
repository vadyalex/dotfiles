#!/usr/bin/env bb


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;                          All the different tools
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(def git ["git"
          #{["~/.dotfiles/git/gitconfig" :-> "~/.gitconfig"]}])

(def zsh [:zsh
          #{}
          {:package-info                "zsh"
           :pre-install-hook-fn         '(fn [] (log "Install zsh"))
           :post-install-hook-fn        '(fn [] (do 
                                                    (log "Change default shell to /bin/zsh")
                                                    (eshell "chsh" "-s" "/bin/zsh")))
           :post-uninstall-hook-fn      '(fn [] (do 
                                                    (log "Change default shell to /bin/bash")
                                                    (eshell "chsh" "-s" "/bin/bash")))}])

(def oh-my-zsh [:oh-my-zsh
                 #{["~/.dotfiles/bin"            :-> "~/.bin"]
                   ["~/.dotfiles/zsh/aliases"    :-> "~/.aliases"]
                   ["~/.dotfiles/zsh/zshrc"      :-> "~/.zshrc"]}
                 {:package-manager   :git
                  :package-info      ["https://github.com/robbyrussell/oh-my-zsh.git" "~/.oh-my-zsh"]
                  :depends-on        ["git"]}])

(def shell [git zsh oh-my-zsh])

(def toolbelt [["gnupg"] ["pass"] ["qrencode"] ["paperkey"]
               ["curl"] ["wget"]
               ["rsync"]
               ["mosh"]
               ["net-tools"] ["iperf3"] ["dnsutils"]
               ["smartmontools"]
               ["lm-sensors"]
               ["unzip"]
               ["imagemagick"]
               ["pv"]                                  ;;
               ["iotop"]                               ;; > sudo iotop # monitor disk IO
               ["radeontop"]                           ;; > radeontop  # show usage statistics for Radeon GPUs
               ["lshw"]
               ["htop"]
               ["upower"]                              ;; > upower -i /org/freedesktop/UPower/devices/battery_BAT0 # check battery status
               ["neovim"]
               ["htop"]
               ["tmux"]
               ;; ranger
               ["ranger"] ["caca-utils"] ["highlight"] ["atool"] ["w3m"] ["poppler-utils"] ["mediainfo"]
               ["chafa"]
               ["tree"]
               ["speedometer"] ["bmon"] ["iftop"]
               ["neofetch"]
               ["jq"] ["miller"]
               ["lolcat"]
               ["cowsay"]
               ["sl"] ["figlet"] ["cmatrix"]
               ["borgbackup"] ["restic"]])

(def i3wm [; X server
           ["xserver-xorg"]
           ["xserver-xorg-input-all"]
           ["xserver-xorg-input-synaptics"]
           ; login manager
           ["lightdm"]
           ["lightdm-gtk-greeter"]
           ["lightdm-gtk-greeter-settings"]
           ; i3wm
           ["i3-wm"
            #{["~/.dotfiles/i3/config" :-> "~/.i3/config"]}
            {}]
           ["i3status"
            #{["~/.dotfiles/i3/i3status.conf" :-> "~/.i3status.conf"]}
            {}]
           ["compton"
            #{["~/.dotfiles/compton/compton.conf" :-> "~/.config/compton.conf"]}
            {}]
           ["i3lock"]
           ; terminal
           ["xfce4-terminal"
            #{["~/.dotfiles/xfce4/terminalrc" :-> "~/.config/xfce4/terminal/terminalrc"]}
            {}]
           ; fonts
           [
            "nerd-fonts"
            #{}
            {:package-manager             :script
             :depends-on                  ["curl" "unzip" "fontconfig"]
             :package-info                [; install-fn
                                           '(fn [] (do
                                                      (log "Downloading archive..")
                                                      (eshell "curl" "-fLo" "/tmp/nerd_fonts_archive.zip" "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.zip")
                                                      (log "Extracting archive..")
                                                      (eshell "sudo" "unzip" "-o" "/tmp/nerd_fonts_archive.zip" "-d" "/usr/share/fonts")
                                                      (log "Refresh fonts..")
                                                      (eshell "sudo" "fc-cache" "-f" "-v")
                                                      (log "NerdFonts are in place!")))
                                           ; update-fn -- basically copy from above
                                           '(fn [] (do
                                                      (log "Downloading archive..")
                                                      (eshell "curl" "-fLo" "/tmp/nerd_fonts_archive.zip" "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.zip")
                                                      (log "Extracting archive..")
                                                      (eshell "sudo" "unzip" "-o" "/tmp/nerd_fonts_archive.zip" "-d" "/usr/share/fonts")
                                                      (log "Refresh fonts..")
                                                      (eshell "sudo" "fc-cache" "-f" "-v")
                                                      (log "NerdFonts are in place!")))
                                          ]
            }
           ]
           ["rofi"
            #{["~/.dotfiles/rofi/config.rasi" :-> "~/.config/rofi/config.rasi"]}
            {}]
           ["network-manager-applet"] ["network-manager-gnome"]
           ["blueman"]
           ["ibus"]
           ["pipewire"] ["pipewire-pulse"] ["pavucontrol"]
           ["nautilus"] ["thunar"] ["gvfs"] ["gvfs-smb"] ["gvfs-fuse"] ["gvfs-daemons"] ["gvfs-backends"] ["tumbler"] ["gnome-thumbnail-factory"]
           ["arandr"]
           ["feh"]
           ["gnome-screenshot"]
          ])


(def apps [[:flatpak
            #{}
            {:package-info          "flatpak"
             :post-install-hook-fn  '(fn [] (do 
                                        (log "Adding flathub repository")
                                        (eshell "sudo" "flatpak" "remote-add" "--if-not-exists" "flathub" "https://flathub.org/repo/flathub.flatpakrepo")))}]
           [:firefox
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "org.mozilla.firefox"]
             :post-install-hook-fn  '(fn [] (do 
                                        (log "Allow access to home directory to download files for Firefox")
                                        (eshell "sudo" "flatpak" "override" "--filesystem=home" "org.mozilla.firefox")
                                        (log "Make Firefox default browser")
                                        (eshell "xdg-settings" "set" "default-web-browser" "org.mozilla.firefox.desktop")))
             :depends-on            [:flatpak]}]
           [:Brave
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "com.brave.Browser"]
             :depends-on            [:flatpak]}]
           [:Chrome
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "com.google.Chrome"]
             :depends-on            [:flatpak]}]
           [:thunderbird
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "org.mozilla.Thunderbird"]
             :depends-on            [:flatpak]}]
           [:skype
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "com.skype.Client"]
             :post-install-hook-fn  '(fn [] (do 
                                        (log "Allow access to home directory to download files for Skype")
                                        (eshell "sudo" "flatpak" "override" "--filesystem=home" "com.skype.Client")))
             :depends-on            [:flatpak]}]
           [:telegram
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "org.telegram.desktop"]
             :post-install-hook-fn  '(fn [] (do 
                                        (log "Allow access to home directory to download files for Telegram")
                                        (eshell "sudo" "flatpak" "override" "--filesystem=home" "org.telegram.desktop")))
             :depends-on            [:flatpak]}]
           [:slack
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "com.slack.Slack"]
             :post-install-hook-fn  '(fn [] (do 
                                        (log "Allow access to home directory to download files for Slack")
                                        (eshell "sudo" "flatpak" "override" "--filesystem=home" "com.slack.Slack")))
             :depends-on            [:flatpak]}]
           [:spotify
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "com.spotify.Client"]
             :depends-on            [:flatpak]}]
           [:vlc
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "org.videolan.VLC"]
             :depends-on            [:flatpak]}]
           [:transmission
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "com.transmissionbt.Transmission"]
             :depends-on            [:flatpak]}]
           [:evince
            #{}
            {:description           "PDF viewer"
             :package-manager       :flatpak
             :package-info          ["flathub" "org.gnome.Evince"]
             :depends-on            [:flatpak]}]
           [:LibreOffice
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "org.libreoffice.LibreOffice"]
             :depends-on            [:flatpak]}]
           [:apostrophe
            #{}
            {:description           "Beautiful markdown editor"
             :package-manager       :flatpak
             :package-info          ["flathub" "org.gnome.gitlab.somas.Apostrophe"]
             :depends-on            [:flatpak]}]
           [:vscode
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "com.visualstudio.code"]
             :depends-on            [:flatpak]}]
           [:FreeCAD
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "org.freecadweb.FreeCAD"]
             :depends-on            [:flatpak]}]
           [:OpenSCAD
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "org.openscad.OpenSCAD"]
             :depends-on            [:flatpak]}]
           [:PrusaSlicer
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "com.prusa3d.PrusaSlicer"]
             :depends-on            [:flatpak]}]
           [:wireshark
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "org.wireshark.Wireshark"]
             :depends-on            [:flatpak]}]
           [:Flatseal
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "com.github.tchx84.Flatseal"]
             :depends-on            [:flatpak]}]
           [:Loupe
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "org.gnome.Loupe"]
             :depends-on            [:flatpak]}]
           ; ----------------------------------------------------------------------------------------------------------------
           ;
           ;    Steam games!
           ;
           [:steam
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "com.valvesoftware.Steam"]
             :depends-on            [:flatpak]}]
           ; ----------------------------------------------------------------------------------------------------------------
           ;
           ;    JetBrain IDEs
           ;
           [:IntelliJ-IDEA-Community
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "com.jetbrains.IntelliJ-IDEA-Community"]
             :post-install-hook-fn  '(fn [] (do 
                                        (log "Allow access to home directory..")
                                        (eshell "sudo" "flatpak" "override" "--filesystem=home" "com.jetbrains.IntelliJ-IDEA-Community")))
             :depends-on            [:flatpak]}]
           [:PyCharm-Community
            #{}
            {:package-manager       :flatpak
             :package-info          ["flathub" "com.jetbrains.PyCharm-Community"]
             :post-install-hook-fn  '(fn [] (do 
                                        (log "Allow access to home directory..")
                                        (eshell "sudo" "flatpak" "override" "--filesystem=home" "com.jetbrains.PyCharm-Community")))
             :depends-on            [:flatpak]}]
            ; ----------------------------------------------------------------------------------------------------------------
            ])


(def dev-tools [["make"]
                ["podman"]])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;                          All the system states to attune
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def systems [{:key             "rocket"
               :description     "My Debian based linux env"
               :env             {:os              :debian
                                 :package-manager :apt}
               :shell           shell
               :toolbelt        toolbelt
               :desktop         i3wm
               :apps            apps
               :dev-tools       dev-tools}

              {:key             "mi"
               :description     "Xiamomi Laptop"
               :env             {:os              :debian
                                 :package-manager :apt}
               :shell           shell
               :toolbelt        toolbelt
               :desktop         i3wm
               :desktop-apps    apps}

              {:key             "rpi"
               :description     "Raspbian"
               :env             {:os              :debian
                                 :package-manager :apt}
               :shell           shell
               :toolbelt        toolbelt}

              {:key             "pine"
               :description     "PineBook Pro running Manjaro!"
               :env             {:os              :arch
                                 :package-manager :pacman
                                 :architecture    :aarch64}
               :shell           shell
               :toolbelt        toolbelt
	           :desktop         i3wm
               :apps            apps
              }

              {:key             "titan"
               :description     "My Debian based workstation"
               :env             {:os              :debian
                                 :package-manager :apt}
               :shell           shell
               :toolbelt        toolbelt
               :desktop         i3wm
               :apps            apps
               :dev-tools       dev-tools}

              {:key             "bankbook"
               :description     "MacBook Pro work laptop"

               :env             {:os              :macOS
                                 :package-manager :brew}

               :zsh             [git oh-my-zsh]

               :mac-apps        [["alfred"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ; Terminal emulators
                                 ["iterm2"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ["warp"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ["alacritty"
                                  #{["~/.dotfiles/alacritty/alacritty.yml" :-> "~/.config/alacritty/alacritty.yml"]}
                                  {:package-manager        :brew-cask
                                   :post-install-hook-fn  '(fn [] (do
                                                                    (log "Whitelist Alacritty..")
                                                                    (eshell "xattr" "-rd" "com.apple.quarantine" "/Applications/Alacritty.app")))}]
                                 ["cyberduck"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ["adobe-acrobat-reader"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ["evernote"
                                  #{}
                                  {:package-manager :brew-cask}]

                                 ["podman-desktop"
                                  #{}
                                  {:package-manager :brew-cask}]

                                 ; Many different browsers!
                                 ["firefox"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ["google-chrome"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ["brave-browser"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ; Dev tool apps
                                 ["intellij-idea-ce"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ["webstorm"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ["pycharm-ce"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ["datagrip"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ["azure-data-studio"
                                  #{}
                                  {:package-manager :brew-cask}]
                                 ["orbstack"
                                  #{}
                                  {:package-manager :brew-cask}]
                                ]


               :mac-dev-tools   [["gnupg"] ["pgpdump"]
                                 ["pass"]  ["gopass"]
                                 ["asciinema"]
                                 ["lolcat"]
                                 ["cowsay"]
                                 ["tmux"]
                                 ["neovim"]
                                 ["htop"]
                                 ["kubernetes-cli"]
                                 ["kubeseal"]
                                 ["jq"]
                                 ["ranger"]
                                 ;; Python
                                 ["pyenv"]
                                 ["pipx"]
                                 ["dive"]
                                 ;; node.js version manager
                                 [
                                    "nvm"
                                    ;#{}
                                    ;{:post-install-hook-fn  '(fn [] (do
                                    ;                                    (log "Installing node.js..")
                                    ;                                    (eshell "nvm" "install" "20")))}
                                 ]
                                 ;; JAVA!!!11
                                 [
                                    "corretto@21"
                                 ]
                                 ]}
             ])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require '[clojure.string :as str])
(require '[clojure.data :refer [diff]])
(require '[clojure.java.shell :refer [sh]])
(require '[clojure.java.io :as io])
(require '[clojure.pprint :refer [pprint]])
(require '[babashka.fs :as fs])
(require '[babashka.process :refer [process]])


(defn log [& args]
    (let [yellow "\u001B[33m"
          cyan	 "\u001B[36m"
          reset  "\u001B[0m"]
        (apply println (concat [cyan] args [reset]))))

(defn eshell [& args]
    (let [{:keys [exit]} @(process args {:inherit true })]
        (if (zero? exit) 0)))

(defn expand-home [target] (some-> target
                                   (fs/expand-home)
                                   (.toString)))

(defn sym-link [origin target]
    (let [expanded-origin (expand-home origin)
          expanded-target (expand-home target)]
        (if (and expanded-origin expanded-target)
            (when-not (fs/exists? expanded-target)
                (io/make-parents expanded-target)
                (fs/create-sym-link expanded-target expanded-origin)))))

(defn apt [action package]
    (case action
        :update  (and (eshell "sudo" "apt" "update")
                      (eshell "sudo" "apt" "upgrade" "-y")
                      (eshell "sudo" "apt" "autoremove" "-y"))

        :install (and (eshell "sudo" "apt" "update")
                      (eshell "sudo" "apt" "install" "-y" package)
                      (eshell "sudo" "apt" "autoremove" "-y"))

        :uninstall (eshell "sudo" "apt" "purge" "-y" package)

        nil))

(defn git [action [url target]]
    (case action
        :update  (if-some [expanded-target (expand-home target)]
                    (when (fs/exists? expanded-target)
                        (eshell "git" "-C" expanded-target "pull" "--rebase" "--autostash")))

        :install (if-some [expanded-target (expand-home target)]
                    (when-not (fs/exists? expanded-target)
                        (eshell "git" "clone" "--depth=1" url expanded-target)))

        :uninstall (if-some [expanded-target (expand-home target)]
                    (when (fs/exists? expanded-target)
                        (log "Remove manually" expanded-target)
                        true))

        nil))

(defn flatpak [action [hub app]]
    (case action
        :update    (eshell "sudo" "flatpak" "update" "-y")
        :install   (eshell "sudo" "flatpak" "install" "-y" hub app)
        :uninstall (eshell "sudo" "flatpak" "uninstall" "-y" app)
        nil))

(defn brew [action package]
    (case action
        :update    (and (eshell "brew" "update")
                        (eshell "brew" "upgrade")
                        (eshell "brew" "cleanup" "--prune=all"))
        :install   (eshell "brew" "install" package)
        :uninstall (and (eshell "brew" "uninstall" package)
                        (eshell "brew" "cleanup" "--prune=all"))
        nil))

(defn pacman [action package]
    (case action
        :update    (and (eshell "sudo" "pacman" "-Syu" "--noconfirm")
                        (eshell "sudo" "pacman" "-Sy" "--noconfirm" package))
        :install   (eshell "sudo" "pacman" "-Sy" "--noconfirm" package)
        :uninstall (eshell "sudo" "pacman" "-Rs" "--noconfirm" package)
        nil))

(defn brew-cask [action package]
    (case action
        :update    (and (eshell "brew" "update")
                        (eshell "brew" "upgrade")
                        (eshell "brew" "cleanup" "--prune=all"))
        :install   (eshell "brew" "install" "--cask" package)
        :uninstall (and (eshell "brew" "uninstall" package)
                        (eshell "brew" "cleanup" "--prune=all"))
        nil))

(defn script [action [install-fn update-fn uninstall-fn]]
    (case action
        :install   (and (some? install-fn)
                        ((eval install-fn)))
        :update    (and (some? update-fn)
                        ((eval update-fn)))
        :uninstall (and (some? uninstall-fn)
                        ((eval uninstall-fn)))
        nil))

(defn package-manager! [name action package-info] 
    (case name
        :apt        (apt       action package-info)
        :git        (git       action package-info)
        :flatpak    (flatpak   action package-info)
        :pacman     (pacman    action package-info)
        :brew       (brew      action package-info)
        :brew-cask  (brew-cask action package-info)
        :script     (script    action package-info)
        nil))

(defn sync-configs [configs]
    (doseq [[origin _ target] configs]
        (sym-link origin target)
        (log "\t" origin "->" target)))

(defn install [[name configs context]]
    (let [{:keys [package-manager package-info]} context
          install-tool (partial package-manager! package-manager :install (or package-info name))]
        (log "\t[" name "]")
        (log "Installing..")
        (when-some [pre-install-hook-fn (:pre-install-hook-fn context)]
            (log ":pre-install-hook-fn")
            ((eval pre-install-hook-fn)))
        (when (install-tool)   
            (when-not (empty? configs)
                (log "Sync configs..")
                (sync-configs configs))            
            (when-some [post-install-hook-fn (:post-install-hook-fn context)]
                (log ":post-install-hook-fn")
                ((eval post-install-hook-fn)))
        (log "Done."))))

(defn uninstall [[name configs context]]
    (let [{:keys [package-manager package-info]} context
          uninstall-tool (partial package-manager! package-manager :uninstall (or package-info name))]
        (log "\t[" name "]")
        (log "Uninstalling..")
        (when-some [pre-uninstall-hook-fn (:pre-uninstall-hook-fn context)]
            (log ":pre-uninstall-hook-fn")
            ((eval pre-uninstall-hook-fn)))
        (when (uninstall-tool)
            (when-not (empty? configs)
                (log "Remove sym-linked configs manually.."))         
            (when-some [post-uninstall-hook-fn (:post-uninstall-hook-fn context)]
                (log ":post-uninstall-hook-fn")
                ((eval post-uninstall-hook-fn)))
        (log "Done."))))

(defn list-tools [state]
    (let [keys-to-ignore [:key :description :env]]
        (->> (apply dissoc state keys-to-ignore)
             (mapcat second)
             (into (hash-set)))))

(defn dependencies-graph [state]
    (->> state
         (list-tools)
         (mapcat (fn [[name configs context]] 
            (if-let [depends-on (:depends-on context)] 
                (map (fn [parent] [parent name]) depends-on)
                [[:root name]])))
         (group-by first)
         (map (fn [[v coll]]
                  [v (->> coll
                          (map second)
                          (into []))]))
         (into (hash-map))))

(defn bfs
    ([graph]
     (bfs graph :root))
    ([graph root]
     (let [visited? (fn [v coll] (some #(= % v) coll))]
        (loop [queue   (conj clojure.lang.PersistentQueue/EMPTY root) ;; Use a queue to store the nodes we need to explore
               visited []]                                            ;; A vector to store the sequence of visited nodes
            (if (empty? queue) 
                visited                                               ;; Base case - return visited nodes if the queue is empty
                (let [v           (peek queue)
                      neighbors     (get graph v)
                      not-visited   (filter (complement #(visited? % visited)) neighbors)
                      new-queue     (apply conj (pop queue) not-visited)]
                    (if (visited? v visited)
                        (recur new-queue visited)
                        (recur new-queue (conj visited v)))))))))

(defn dependencies-list [state]
    (->> state
         (dependencies-graph)
         (bfs)
         (rest)))

(defn index-dependencies
    [deps]
    (->> deps
         (map-indexed (fn [i name] [name i]))
         (into (hash-map))))

(defn attune [snapshot state]
    (log "ATTUNE SYSTEM TO STATE" (str "'" (:key state) "'") "..")
    (let [[uninstall-tools install-tools _] (diff (list-tools snapshot)
                                                  (list-tools state))
          state-dependencies-index-map      (-> state (dependencies-list) (index-dependencies))
          sort-by-installation-order        (partial sort-by (fn [[name _ _]] (get state-dependencies-index-map name)) <)
          snapshot-dependencies-index-map   (-> snapshot (dependencies-list) (index-dependencies))
          sort-by-uninstallation-order      (partial sort-by (fn [[name _ _]] (get snapshot-dependencies-index-map name)) >)
          default-context                   {:package-manager (get-in state [:env :package-manager])}
          apply-default-context             (fn [[name configs context]] [name configs (merge default-context (or context {}))])]
        (log "UNINSTALL TOOLS:")
        (->> uninstall-tools
             (map apply-default-context)
             (sort-by-uninstallation-order)
             (map uninstall)
             (dorun))
        (log "INSTALL TOOLS:")
        (->> install-tools
             (map apply-default-context)
             (sort-by-installation-order)
             (map install)
             (dorun))
        (log "COMPLETE!")
        (log "UPDATE ALL TOOLS:")
        (->> state
             (list-tools)
             (map apply-default-context)
             (map (fn [tool]
                    (let [[name _ {:keys [package-manager package-info]}] tool]
                        (if (contains? #{:git :script} package-manager)
                            (do (log "\t[" name "]")
                                (log "Updating..")
                                (package-manager! package-manager :update package-info)
                                (log "Done.")
                                nil)
                            tool))))
             (map (fn [[_ _ context]] (:package-manager context)))
             (filter some?)
             (distinct)
             (map (fn [name]
                    (log "\t[" name "]")
                    (log "Updating..")
                    (package-manager! name :update nil)
                    (log "Done.")))
             (dorun))
        (log "COMPLETE!")        
        (log "SYSTEM IS ATTUNED! 🎵")
        state))

(def snapshot-file (-> "~/.attune.snapshot.edn"
                       (fs/expand-home)
                       (.toString)))

(defn load-snapshot
    ([] (load-snapshot snapshot-file))
    ([f] (if (fs/exists? f)
            (some-> f
                    (slurp)
                    (edn/read-string)))))

(defn save-snapshot!
    ([snapshot] (save-snapshot! snapshot-file snapshot))
    ([f snapshot] (if snapshot
                    (some-> f
                            (spit snapshot)))))

(defn match-system [key]
    (when-some [system (when key
                            (->> systems
                                 (filter (fn [system] (= key (:key system))))
                                 (first)))]
        system))

(let [snapshot (load-snapshot)
      key (or (:key snapshot)
              (first *command-line-args*))]
    (if key
        (-> snapshot
            (attune (match-system key))
            (save-snapshot!))
        (do
            (log "What system state to attune to? Available keys are:" (->> systems (map :key) (str/join ", ")))
            (System/exit 1))))
